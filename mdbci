#!/usr/bin/env ruby
# frozen_string_literal: true

# This file is part of MDBCI.
#
# MDBCI is free software: you can redistribute it and/or modify it under the terms
# of the GNU General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
#
# MDBCI is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with MDBCI.
# If not, see <https://www.gnu.org/licenses/>.

# Properly setup gems with bundler
current_dir = Dir.pwd
Dir.chdir(__dir__)
require 'rubygems'
require 'bundler/setup'
Dir.chdir(current_dir)

require 'English'
require 'getoptlong'


# Reading options
opts = GetoptLong.new(
  ['--all', GetoptLong::NO_ARGUMENT],
  ['--attempts', '-a', GetoptLong::REQUIRED_ARGUMENT],
  ['--architecture', GetoptLong::REQUIRED_ARGUMENT],
  ['--box-name', '-n', GetoptLong::REQUIRED_ARGUMENT],
  ['--boxes', '-b', GetoptLong::REQUIRED_ARGUMENT],
  ['--command', '-c', GetoptLong::REQUIRED_ARGUMENT],
  ['--configuration-file', GetoptLong::REQUIRED_ARGUMENT],
  ['--cpu-count', GetoptLong::REQUIRED_ARGUMENT],
  ['--threads', GetoptLong::REQUIRED_ARGUMENT],
  ['--force', GetoptLong::NO_ARGUMENT],
  ['--field', '-f', GetoptLong::REQUIRED_ARGUMENT],
  ['--force-distro', GetoptLong::REQUIRED_ARGUMENT],
  ['--force-version', GetoptLong::NO_ARGUMENT],
  ['--help', GetoptLong::NO_ARGUMENT],
  ['--hours', GetoptLong::REQUIRED_ARGUMENT],
  ['--ipv6', GetoptLong::NO_ARGUMENT],
  ['--json', GetoptLong::NO_ARGUMENT],
  ['--key', '-k', GetoptLong::REQUIRED_ARGUMENT],
  ['--keep-template', GetoptLong::NO_ARGUMENT],
  ['--labels', '-l', GetoptLong::REQUIRED_ARGUMENT],
  ['--list', GetoptLong::NO_ARGUMENT],
  ['--node-name', GetoptLong::REQUIRED_ARGUMENT],
  ['--override', '-w', GetoptLong::NO_ARGUMENT],
  ['--path-to-nodes', GetoptLong::REQUIRED_ARGUMENT],
  ['--platform', '-o', GetoptLong::REQUIRED_ARGUMENT],
  ['--platform-version', '-i', GetoptLong::REQUIRED_ARGUMENT],
  ['--product', '-p', GetoptLong::REQUIRED_ARGUMENT],
  ['--product-version', '-v', GetoptLong::REQUIRED_ARGUMENT],
  ['--recreate', GetoptLong::NO_ARGUMENT],
  ['--reinstall', GetoptLong::NO_ARGUMENT],
  ['--repo-dir', '-r', GetoptLong::REQUIRED_ARGUMENT],
  ['--repo-key', GetoptLong::REQUIRED_ARGUMENT],
  ['--silent', '-s', GetoptLong::NO_ARGUMENT],
  ['--snapshot-name', GetoptLong::REQUIRED_ARGUMENT],
  ['--template', '-t', GetoptLong::REQUIRED_ARGUMENT],
  ['--user', GetoptLong::REQUIRED_ARGUMENT],
  ['--include-unsupported', GetoptLong::NO_ARGUMENT]
)

$mdbci_exec_dir = File.expand_path(__dir__)

require_relative 'core/session'
require_relative 'core/out'
require_relative 'core/services/version'
require_relative 'core/models/result'

session = Session.new
$session = session
session.template_file = 'instance.json'
session.ipv6 = false

Dir.chdir ENV['OLD_CWD'] unless ENV['OLD_CWD'].nil?

Dir.chdir ENV['MDBCI_VM_PATH'] unless ENV['MDBCI_VM_PATH'].nil?

session.mdbci_dir = $mdbci_exec_dir

# Storing argument for the further processing
initial_arguments = ARGV.join(' ')

ENV['LIBVIRT_DEFAULT_URI'] = 'qemu:///system'

begin
  opts.each do |opt, arg|
    case opt
    when '--all'
      session.all = true

    when '--architecture'
      session.architecture = arg unless arg.empty?

    when '--silent'
      session.isSilent = true

    when '--template'
      session.template_file = arg unless arg.empty?

    when '--boxes'
      session.boxes_location = arg unless arg.empty?

    when '--box-name'
      session.boxName = arg unless arg.empty?

    when '--field'
      session.field = arg unless arg.empty?

    when '--force'
      session.isForce = true

    when '--override'
      session.override = true

    when '--command'
      session.command = arg

    when '--cpu-count'
      session.cpu_count = arg

    when '--threads'
      session.threads_count = arg.to_i

    when '--repo-dir'
      session.repo_dir = arg

    when '--attempts'
      session.attempts = arg

    when '--product'
      session.nodeProduct = arg unless arg.empty?

    when '--product-version'
      session.productVersion = arg unless arg.empty?

    when '--key'
      session.keyFile = File.absolute_path(arg) unless arg.empty?

    when '--keep-template'
      session.keep_template = true

    when '--list'
      session.list = true

    when '--platform'
      session.boxPlatform = arg unless arg.empty?

    when '--platform-version'
      session.boxPlatformVersion = arg unless arg.empty?

    when '--path-to-nodes'
      session.path_to_nodes = arg

    when '--node-name'
      session.node_name = arg

    when '--snapshot-name'
      session.snapshot_name = arg

    when '--ipv6'
      session.ipv6 = true

    when '--json'
      session.json = true

    when '--configuration-file'
      session.configuration_file = File.absolute_path(arg)

    when '--force-version'
      session.force_version = true

    when '--help'
      session.show_help = true

    when '--hours'
      session.hours = arg

    when '--reinstall'
      session.reinstall = true

    when '--recreate'
      session.recreate = true

    when '--repo-key'
      session.repo_key = arg

    when '--labels'
      session.labels = arg

    when '--force-distro'
      session.force_distro = arg

    when '--user'
      session.user = arg

    when '--include-unsupported'
      session.include_unsupported = true

    else
      out.error 'Option is not supported: ' + opt
    end
  end
rescue GetoptLong::MissingArgument => e
  $stdout.puts(e.backtrace.join("\n"))
  $stdout.puts(e.to_s)
  exit 1
end

session.initialize_force

out = Out.new(session.isSilent, session.isForce)
$out = out

# Putting the information about the
out.info "MariaDB CI CLI, version: #{Version.version(session.mdbci_dir, out)}"
out.info "mdbci called with: #{initial_arguments}"

at_exit do
  if $ERROR_INFO.nil? || $ERROR_INFO.is_a?(SystemExit) && $ERROR_INFO.success?
    out.debug('MDBCI success with code: 0')
  else
    code = $ERROR_INFO.is_a?(SystemExit) ? $ERROR_INFO.status : 1
    out.debug("MDBCI failure with code: #{code}")
  end
end

# run commands and return 0 for success, 1 for error
begin
  session.initialize_services
  exit_code = session.commands
rescue StandardError => e
  out.error e.backtrace.join("\n")
  out.error e.to_s
  exit_code = 1
end

if exit_code.is_a?(Result::Base)
  exit_code = exit_code.match(
     ok: -> (_) { 0 },
     error: -> (message) do
       out.error(message)
       1
     end
  )
end
exit exit_code
