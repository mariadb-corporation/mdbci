# frozen_string_literal: true

require 'date'
require 'erb'
require 'socket'
require_relative '../../models/result'

# The class generates the Terraform infrastructure file for Digital Ocean provider
class TerraformDigitaloceanGenerator
  # Initializer.
  # @param configuration_id [String] configuration id
  # @param digitalocean_config [Hash] hash of Digital Ocean configuration
  # @param logger [Out] logger
  # @param configuration_path [String] path to directory of generated configuration
  # @param ssh_keys [Hash] ssh keys info in format { public_key_value, private_key_file_path }
  # @return [Result::Base] generation result.
  def initialize(configuration_id, digitalocean_config, logger, configuration_path, ssh_keys)
    @configuration_id = configuration_id
    @digitalocean_config = digitalocean_config
    @ui = logger
    @configuration_path = configuration_path
    @configuration_tags = { configuration_id: @configuration_id }
    @public_key_value = ssh_keys[:public_key_value]
    @private_key_file_path = ssh_keys[:private_key_file_path]
  end

  # Generate a Terraform configuration file.
  # @param node_params [Array<Hash>] list of node params.
  # @param configuration_file_path [String] path to generated Terraform infrastructure file.
  # @return [Result::Base] generation result.
  def generate_configuration_file(node_params, configuration_file_path)
    return Result.error('Digital Ocean is not configured') if @digitalocean_config.nil?

    file = File.open(configuration_file_path, 'w')
    file.puts(file_header)
    file.puts(provider_resource)
    node_params.each do |node|
      print_node_info(node)
      file.puts(generate_node_definition(node))
    end
    file.close
  rescue StandardError => e
    Result.error(e.message)
  else
    Result.ok('')
  end

  # Generate the instance name.
  # @param configuration_id [String] configuration id.
  # @param node_name [String] name of the node.
  # @return [String] generated instance name.
  def self.generate_instance_name(configuration_id, node_name)
    "#{configuration_id}-#{format_string(node_name)}"
  end

  # Format string (only letters, numbers and hyphen).
  # @param string [String] string for format
  # @return [String] formatted string.
  def self.format_string(string)
    string.gsub(/[^A-Za-z0-9]/, '-').gsub(/-+/, '-').gsub(/-$/, '').downcase
  end

  # Generate key pair name by configuration id.
  # The name includes an identifier, host name,
  # and configuration name to identify the owner of the key.
  #
  # @param configuration_id [String] configuration id
  # @return [String] key pair name
  def self.generate_key_pair_name(configuration_id, configuration_path)
    hostname = Socket.gethostname
    config_name = File.basename(configuration_path)
    "#{configuration_id}-#{config_name}-#{hostname}"
  end

  private

  # Log the information about the main parameters of the node.
  # @param node_params [Hash] list of the node parameters.
  def print_node_info(node_params)
    @ui.info("Digital Ocean definition for host: #{node_params[:host]}, "\
             "image:#{node_params[:image]}, size:#{node_params[:size]}")
  end

  def file_header
    <<-HEADER
    # !! Generated content, do not edit !!
    # Generated by MariaDB Continuous Integration Tool (https://github.com/mariadb-corporation/mdbci)
    #### Created #{Time.now} ####
    HEADER
  end

  # Generate provider resource.
  def provider_resource
    <<-PROVIDER
    provider "digitalocean" {
      version = "~> 1.12"
      token = "#{@digitalocean_config['token']}"
    }
    #{ssh_resource}
    PROVIDER
  end

  # Generate fields for setting ssh in the metadata block of instance.
  # @return [String] generated fields.
  def ssh_resource
    key_pair_name = self.class.generate_key_pair_name(@configuration_id, @configuration_path)
    <<-SSH_DATA
    resource "digitalocean_ssh_key" "default" {
      name = "#{key_pair_name}"
      public_key = "#{@public_key_value}"
    }
    SSH_DATA
  end

  # Generate instance resources.
  # @param node_params [Hash] list of the node parameters
  # @return [String] generated resources for instance.
  # rubocop:disable Metrics/MethodLength
  def instance_resources(node_params)
    instance_name = self.class.generate_instance_name(@configuration_id, node_params[:name])
    tags_block = tags_partial(node_params[:tags])
    region = @digitalocean_config['region']
    key_file = @private_key_file_path
    template = ERB.new <<-INSTANCE_RESOURCES
    resource "digitalocean_droplet" "<%= name %>" {
      image = "<%= image %>"
      name = "<%= instance_name %>"
      region = "<%= region %>"
      size = "<%= size %>"
      private_networking = true
      <%= tags_block %>
      ssh_keys = [digitalocean_ssh_key.default.fingerprint]
    }
    output "<%= name %>_network" {
      value = {
        user = "<%= user %>"
        private_ip = digitalocean_droplet.<%= name %>.ipv4_address_private
        public_ip = digitalocean_droplet.<%= name %>.ipv4_address
        key_file = "<%= key_file %>"
        hostname = "<%= instance_name %>"
      }
    }
    INSTANCE_RESOURCES
    template.result(OpenStruct.new(node_params).instance_eval { binding })
  end
  # rubocop:enable Metrics/MethodLength

  # Generate a tags block.
  # @param tags [Array<String>] list of tags
  # @return [String] tags block definition.
  def tags_partial(tags)
    "tags = [#{tags.map { |name, value| "\"#{name}-#{value}\"" }.join(', ')}]"
  end

  # Generate a node definition for the configuration file.
  # @param node_params [Hash] list of the node parameters
  # @return [String] node definition for the configuration file.
  def generate_node_definition(node_params)
    tags = @configuration_tags.merge(hostname: self.class.format_string(Socket.gethostname),
                                     username: self.class.format_string(node_params[:user]),
                                     machinename: self.class.format_string(node_params[:name]))
    instance_resources(node_params.merge(tags: tags))
  end
end
